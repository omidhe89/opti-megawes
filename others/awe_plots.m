% awe_plots - Generates plots of optimal flight trajectory and performance,
% and compiles them into a LaTeX document.

% Apache License, Version 2.0
%
% Copyright (c) 2025 Omid Heydarnia
%
% Licensed under the Apache License, Version 2.0 (the "License");
% you may not use this file except in compliance with the License.
% You may obtain a copy of the License at
%
%     http://www.apache.org/licenses/LICENSE-2.0
%
% Unless required by applicable law or agreed to in writing, software
% distributed under the License is distributed on an "AS IS" BASIS,
% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
% See the License for the specific language governing permissions and
% limitations under the License.
%
% Author: Omid Heydarnia
% Email: omid.heydarnia@ugent.be
% Date: June 14, 2025
% Last Modified: June 14, 2025
function awe_plots(t, optimal_results, sol_stat, h, params_num, ocp_bounds)
%
% This function visualizes the results of an optimal control problem for a
% MegAWES (Mega Airborne Wind Energy System) by plotting various states,
% control inputs, and performance metrics. It then generates a LaTeX file
% with these plots and compiles it into a PDF.
%
% Syntax:
%   awe_plots(t, optimal_results, sol_stat, h, params_num, ocp_bounds)
%
% Inputs:
%   t               - Time vector.
%   optimal_results - Structure containing optimal state (xn), control (un),
%                     algebraic (zn), and other relevant results like alpha, beta,
%                     vel_W, pos_O.
%   sol_stat        - Solver statistics, specifically CPU times.
%   h               - Time step.
%   params_num      - Structure containing numerical parameters of the system,
%                     including control mode (ctrl_mode) and winch parameters.
%   ocp_bounds      - Structure containing bounds used in the optimal control problem.
%
% Outputs:
%   None
%
% Example:
%   % Assuming t, optimal_results, sol_stat, h, params_num, ocp_bounds are defined
%   awe_plots(t, optimal_results, sol_stat, h, params_num, ocp_bounds);
%
% See also: plot_trajectory, latex_description, prepare_for_latex

    % Close all existing figures to ensure clean plotting
    close all

    % Determine LaTeX file paths and commands based on the operating system
    latex_filename = 'output.tex';
    if ispc % Windows
        latex_dir = '.\results\';
%         latex_filename = '.\results\output.tex';
%         latexCommand_char = 'pdflatex .\results\output.tex';
    else % macOS or Linux
        latex_filename = './results/';
%         latex_filename = './results/output.tex';
%         latexCommand_char = 'pdflatex ./results/output.tex';
    end
    latex_filename = strcat(latex_dir, latex_filename);
    latexCommand_char = strjoin({'pdflatex', latex_filename}, ' ');

    
    % Open the LaTeX file for writing
    latexFile = fopen(latex_filename, 'w');

    % Write the standard LaTeX document preamble
    fprintf(latexFile, '\\documentclass{article}\n');
    fprintf(latexFile, '\\usepackage{graphicx}\n');
    fprintf(latexFile, '\\usepackage{amssymb}\n');
    fprintf(latexFile, '\\usepackage{mathtools}\n');
    fprintf(latexFile, '\\usepackage{mathrsfs}\n');
    fprintf(latexFile, '\\usepackage{amsthm}\n');
    fprintf(latexFile, '\\title{Optimal flight trajectory for MegAWES}\n');
    fprintf(latexFile, '\\author{Generated by Opti-MegAWES toolbox}\n');
    fprintf(latexFile, '\\begin{document}\n');
    fprintf(latexFile, '\\maketitle\n');

    % Extract optimal results into separate variables for easier access
    xn = [optimal_results(:).xn];             % States
    un = [optimal_results(:).un];             % Controls
    zn = [optimal_results(:).zn];             % Algebraic variables
    alpha = [optimal_results(:).alpha];       % Angle of attack
    beta = [optimal_results(:).beta];         % Side slip angle
    T_kite_B = [optimal_results(:).T_kite_B]; % Kite tether force in body frame (not used in plots directly)
    vel_W = [optimal_results(:).vel_W];       % Kite velocity in wind frame
    pos_O = [optimal_results(:).pos_O];       % Kite position in origin frame

    % Write problem formulation and constraints to the LaTeX file
    latex_description(latexFile, params_num, ocp_bounds)

    % Plot and include the optimal trajectory
    fig_traj = plot_trajectory(pos_O, xn, params_num, 100);
    set(fig_traj, 'Name', 'fig_traj');
    prepare_for_latex(latexFile, fig_traj, 'optimal trajectory')

    % Plot optimal states
    figure(1);
    fig_states = gcf;  % Get current figure handle
    set(fig_states, 'Name', 'fig_states', 'units','normalized','Position', [0.1 0.1 0.8 0.8]);

    % Subplot 1: Winch angle
    subplot(7,1,1)
    plot(t.', xn(1,:).','-');
    ylabel('$\theta_{\textrm{w}}$', 'Interpreter', 'latex');
    title('winch angle', 'FontSize', 10)
    hold on
    grid on

    % Subplot 2: Winch angular velocity
    subplot(7,1,2)
    plot(t.', xn(2,:).','-');
    ylabel('$\dot{\theta}_{\textrm{w}}$', 'Interpreter', 'latex');
    title('winch velocity', 'FontSize', 10)
    hold on
    grid on

    % Subplot 3: Kite velocities in body reference frame
    subplot(7,1,3)
    plot(t.', xn(3:5,:).','-');
    legend('x-direction','y-direction','z-direction', 'Interpreter','latex', 'Location','east')
    ylabel('$V_{k}^{\textrm{B}}$', 'Interpreter', 'latex');
    title('kite velocities in body refernce frame', 'FontSize', 10)
    hold on
    grid on

    % Subplot 4: Kite angular velocities in body reference frame
    subplot(7,1,4)
    plot(t.', (180/pi) .* xn(6:8,:).','-');
    legend('x-direction','y-direction','z-direction', 'Interpreter','latex', 'Location','east')
    ylabel('$\omega_{k}^{\textrm{B}}$', 'Interpreter','latex')
    title('kite angular velocities in body refernce frame', 'FontSize', 10)
    hold on
    grid on

    % Subplot 5: Euler angles
    subplot(7,1,5)
    plot(t.', (180/pi) .* xn(9:11,:).','-');
    legend('$\phi$', '$\theta$', '$\psi$', 'Interpreter','latex', 'Location','east')
    ylabel('$q_a (\circ)$', 'Interpreter','latex')
    title('euler angles', 'FontSize', 10)
    hold on
    grid on

    % Subplot 6: Spherical reference angles for parameterizing kite position
    subplot(7,1,6)
    plot(t.', (180/pi) .* xn(12:13,:).','-');
    legend('$\lambda(azimuth)$', '$\eta(elevation)$', 'Interpreter','latex', 'Location','east')
    ylabel('$q_s (\circ)$', 'Interpreter','latex')
    title('spherical coordinate angles of the kite', 'FontSize', 10)
    hold on
    grid on

    % Subplot 7: Kite distance
    subplot(7,1,7)
    plot(t.', xn(14,:).','-');
    ylabel('$r (m)$', 'Interpreter','latex')
    title('kite distants', 'FontSize', 10)
    hold on
    grid on

    % Include the states plot in the LaTeX document
    prepare_for_latex(latexFile, fig_states, 'initial and optimal states')

    % Plot optimal algebraic states
    figure(2);
    fig_alg_states = gcf;  % Get current figure handle
    set(fig_alg_states, 'Name', 'fig_alg_states', 'units','normalized','Position', [0.1 0.1 0.8 0.8]);

    subplot(3,1,1)
    plot(t.', zn(1,:).'./ 1e6);
    ylabel('$T_N (MW)$', 'Interpreter','latex')
    title('tether force at winch', 'FontSize', 10);
    hold on
    grid on

    subplot(3,1,2)
    plot(t.', zn(2,:).' * 180/ pi);
    ylabel('$\theta_N (\circ)$', 'Interpreter','latex')
    hold on
    grid on

    subplot(3,1,3)
    plot(t.', zn(3,:).' * 180/ pi);
    ylabel('$\phi_N$', 'Interpreter','latex')
    hold on
    grid on

    % Include the algebraic states plot in the LaTeX document
    prepare_for_latex(latexFile, fig_alg_states, 'optimal algebriac states')

    % Plot optimal control inputs based on control mode
    figure(3);
    fig_ctrl_inputs = gcf;  % Get current figure handle
    set(fig_ctrl_inputs, 'Name', 'fig_ctrl_inputs', 'Units','normalized','Position', [0.1 0.1 0.8 0.8]);

    if params_num.ctrl_mode == 1
        % Subplot 1: Winch torque
        subplot(5,1,1)
        stairs(t(1:end-1)',un(1,:)'./1e6,'-b')
        ylabel('$T_w\ (\mathrm{MN{\cdot}m})$', 'Interpreter','latex')
        title('Winch Torque', 'FontSize', 10)
        grid on

        % Subplot 2: Control surface deflections
        subplot(5,1,2)
        stairs(t(1:end-1), (180/pi) * un(8:10,:)')
        ylabel('$\delta\ (\circ)$', 'Interpreter','latex')
        title('Control Surface Deflections', 'FontSize', 10)
        legend('aileron','elevator','rudder', 'Interpreter','latex', 'Location','best')
        grid on

        % Subplot 3: Propulsion force
        subplot(5,1,3)
        stairs(t(1:end-1), un(11,:))
        ylabel('$u_p$', 'Interpreter','latex')
        title('Propulsion Force', 'FontSize', 10)
        ylim([-10 10])
        grid on

        % Subplot 4: Aerodynamic forces
        subplot(5,1,4)
        stairs(t(1:end-1), un(2:4,:)' ./ 1e6)
        ylabel('$F_{\mathbf{a}}^B\ (\mathrm{MN})$', 'Interpreter','latex')
        title('Aerodynamic Forces', 'FontSize', 10)
        legend('x-direction','y-direction','z-direction', 'Interpreter','latex', 'Location','best')
        grid on

        % Subplot 5: Aerodynamic moments
        subplot(5,1,5)
        stairs(t(1:end-1), un(5:7,:)' ./ 1e6)
        ylabel('$M_{\mathbf{a}}^B\ (\mathrm{MN{\cdot}m})$', 'Interpreter','latex')
        title('Aerodynamic Moments', 'FontSize', 10)
        legend('x-direction','y-direction','z-direction', 'Interpreter','latex', 'Location','best')
        xlabel('$ Time (s)$')
        grid on

    elseif params_num.ctrl_mode == 2
        subplot(3,1,1)
        stairs(t(1:end-1)',un(1,:)','-b', 'Location','bestoutside')
        legend('T_w')
        grid on
        subplot(3,1,2)
        stairs(t(1:end-1)',un(2:4,:)')
        legend('F_fict|_B(1)','F_fict|_B(2)','F_fict|_B(3)', 'Location','bestoutside')
        grid on
        subplot(3,1,3)
        stairs(t(1:end-1)',un(5:7,:)')
        legend('M_fict|_B(1)','M_fict|_B(3)','M_fict|_B(3)', 'Location','bestoutside')
        grid on
    else % Default control mode
        % Subplot 1: Winch torque
        subplot(7,1,1)
        stairs(t(1:end-1)',un(1,:)'./1e6,'-b')
        ylabel('$T_w\ (\mathrm{MN{\cdot}m})$', 'Interpreter','latex')
        title('Winch Torque', 'FontSize', 10)
        grid on

        % Subplot 2: Force components
        subplot(7,1,2)
        stairs(t(1:end-1), un(2:4,:)')
        ylabel('$F_{\mathbf{f}}^B\ (N)$', 'Interpreter','latex')
        title('Force Components', 'FontSize', 10)
        legend('x-direction','y-direction','z-direction', 'Interpreter','latex', 'Location','best')
        ylim([-10 10])
        grid on

        % Subplot 3: Moment components
        subplot(7,1,3)
        stairs(t(1:end-1), un(5:7,:)')
        ylabel('$M_{\mathbf{f}}^B\ (\mathrm{N{\cdot}m})$', 'Interpreter','latex')
        title('Moment Components', 'FontSize', 10)
        legend('x-direction','y-direction','z-direction', 'Interpreter','latex', 'Location','best')
        ylim([-10 10])
        grid on

        % Subplot 4: Control surface deflections
        subplot(7,1,4)
        stairs(t(1:end-1), (180/pi) * un(8:10,:)')
        ylabel('$\delta\ (\circ)$', 'Interpreter','latex')
        title('Control Surface Deflections', 'FontSize', 10)
        legend('aileron','elevator','rudder', 'Interpreter','latex', 'Location','best')
        grid on

        % Subplot 5: Propulsion force
        subplot(7,1,5)
        stairs(t(1:end-1), un(11,:))
        ylabel('$u_p$', 'Interpreter','latex')
        title('Propulsion Force', 'FontSize', 10)
        grid on

        % Subplot 6: Aerodynamic forces
        subplot(7,1,6)
        stairs(t(1:end-1), un(12:14,:)' ./ 1e6)
        ylabel('$F_{\mathbf{a}}^B\ (\mathrm{MN})$', 'Interpreter','latex')
        title('Aerodynamic Forces', 'FontSize', 10)
        legend('x-direction','y-direction','z-direction', 'Interpreter','latex', 'Location','best')
        grid on

        % Subplot 7: Aerodynamic moments
        subplot(7,1,7)
        stairs(t(1:end-1), un(15:17,:)' ./ 1e6)
        ylabel('$M_{\mathbf{a}}^B\ (\mathrm{MN{\cdot}m})$', 'Interpreter','latex')
        title('Aerodynamic Moments', 'FontSize', 10)
        legend('x-direction','y-direction','z-direction', 'Interpreter','latex', 'Location','best')
        xlabel('$ Time (s)$')
        grid on
    end
    % Include the control inputs plot in the LaTeX document
    prepare_for_latex(latexFile, fig_ctrl_inputs, 'optimal control inputs')

    % Plot power of optimal trajectory
    figure(4);
    fig_powers = gcf;
    set(fig_powers, 'Name', 'fig_powers', 'units','normalized','Position', [0.1 0.1 0.8 0.8]);
    P_opt_z(1,:) = (zn(1,:) .* params_num.winch.radius .* xn(2,:)) ./1e6;
    plot(t, P_opt_z,'-b')
    hold on
    plot(t,(sum(P_opt_z)/params_num.sim.Nt)*ones(length(t),1),'-r')
    grid on
    legend('$P_{opt}$','$\bar{P}_{opt}$','Interpreter','latex')
    title('power of optimal trajectory')
    ylabel('$P (MW)$', 'Interpreter','latex')
    txt_power = sprintf('optimal mechanical power(%f MW)', (sum(P_opt_z)/params_num.sim.Nt));
    prepare_for_latex(latexFile, fig_powers, txt_power)

    % Plot optimal winch acceleration
    figure(5);
    fig_acc_winch = gcf;
    set(fig_acc_winch, 'Name', 'fig_acc_winch', 'units','normalized','Position', [0.1 0.1 0.8 0.8]);
    d2x_w = (xn(2,2:end) - xn(2,1:end-1))/h; % Calculate approximate acceleration
    stairs(t(1:end-1)',d2x_w,'-b')
    ylabel('$\dot{\omega}_{\textrm{w}}$', 'Interpreter', 'latex')
    grid on
    prepare_for_latex(latexFile, fig_acc_winch, 'optimal winch acceleration')

    % Plot aerodynamic angles
    figure(6)
    fig_aero_angels = gcf;
    set(fig_aero_angels, 'Name', 'fig_aero_angels', 'units','normalized','Position', [0.1 0.1 0.8 0.8])
    plot(t', full(alpha) .* (180/pi),'-b')
    hold on
    plot(t', full(beta) .* (180/pi), '-r')
    grid on
    legend('$\alpha$','$\beta$','Interpreter','latex')
    title('aerodynamic angles in degree')
    prepare_for_latex(latexFile, fig_aero_angels, 'optimal angle of attack and side slip')

    % Plot optimal flight velocity in the wind reference frame
    figure(7)
    fig_v_w = gcf;
    set(fig_v_w, 'Name', 'fig_v_w', 'units','normalized','Position',[0.1 0.1 0.8 0.8])
    plot(t, full(vel_W),'--')
    hold on
    plot(t,vecnorm(full(vel_W)), '-b')
    legend('$v_x$', '$v_y$', '$v_z$', '$|v_w|$','Interpreter','latex');
    grid on
    xlabel('time (s)')
    ylabel('$v_w (m/s)$', 'Interpreter','latex')
    prepare_for_latex(latexFile, fig_v_w, 'optimal flight velocity in the wind reference frame')

    % Plot computation times of solvers
    figure(8)
    fig_cpu_time = gcf;
    set(fig_cpu_time, 'Name', 'fig_cpu_time', 'units','normalized','Position',[0.1 0.1 0.8 0.8])
    bar(sol_stat(:,1)')
    xlabel('solvers')
    ylabel('cpu time (sec)')
    prepare_for_latex(latexFile, fig_cpu_time, 'computation times of solvers')

    % End the LaTeX document
    fprintf(latexFile, '\\end{document}\n');
    fclose(latexFile);

    % Compile the LaTeX document to PDF
    [status, cmdout] = system(latexCommand_char);

    % Check if compilation was successful and open the PDF
    if status == 0
        fprintf('PDF successfully compiled.\n');
        % Open the PDF file using the default viewer based on OS
        if ispc % Windows
            pdfFile = "output.pdf";
            winopen(pdfFile);
        elseif ismac % macOS
            pdfFile = "./output.pdf";
            system(['open "', pdfFile, '"']);
        else % Linux
            pdfFile = "./output.pdf";
            system("xdg-open " + pdfFile);
        end
    else
        fprintf('LaTeX compilation failed.\n');
        disp(cmdout); % Display error output if compilation fails
    end
end

% plot_trajectory - Plots the 3D trajectory of the kite.
%
% This function visualizes the kite's path in 3D space, showing its position
% and orientation at various points along the trajectory. It also includes
% visual cues for the ground plane and projection planes.
%
% Syntax:
%   fig_traj = plot_trajectory(pos_O, xn, params_num, fig_num)
%
% Inputs:
%   pos_O       - Kite position in the origin frame [x; y; z].
%   xn          - Optimal state vector, including Euler angles for kite orientation.
%   params_num  - Structure containing numerical parameters, including wind direction.
%   fig_num     - Figure number to use for plotting.
%
% Outputs:
%   fig_traj    - Handle to the generated figure.
%
% See also: awe_plots

function fig_traj = plot_trajectory(pos_O, xn, params_num, fig_num)

    windDirection_rad = params_num.env.wind.direction;

    % Rotation matrix from Origin frame to Wind frame
    M_WO = [cos(windDirection_rad), sin(windDirection_rad), 0;
            sin(windDirection_rad), -cos(windDirection_rad), 0;
            0, 0, -1];

    % Create and set up the figure for the trajectory plot
    figure(fig_num)
    fig_traj = gcf;  % Get current figure handle
    set(figure(fig_num),'units','normalized','Position',[0.1 0.1 0.8 0.8])
    xlabel('x_W (m)');
    ylabel('y_W (m)');
    zlabel('z_W (m)');

    grid on
    box on;
    axis equal;
    hold on;

    % Set the view angle and axis limits for the 3D plot
    view(38,16)
    ax = [-100 800];
    ay = [-450 450];
    az = [0 750];
    axis([ax,ay,az]);
    hold on

    % Define vertices for the ground plane
    X1 = [ax(1);ax(2);ax(2);ax(1)];
    Y1 = [ay(1);ay(1);ay(2);ay(2)];
    Z1 = [0;0;0;0];

    % Define colors for the ground plane
    c = [0 1 0; % green
         0 1 0;
         0 1 0;
         0 1 0];

    % Iterate through the trajectory points to plot the kite and its path
    for k=1:length(pos_O)
        % Determine kite color based on winch velocity (xn(2,k))
        if xn(2,k) < -0.00001
            col =  [0.8, 0.2, 0.2]; % Red if winching in
        else
            col =  [0 0.4470 0.7410]; % Blue if winching out or stationary
        end

        % Transform kite position from Origin frame to Wind frame
        pos_W(:,k) = M_WO * pos_O(:,k);

        % Plot kite image at certain intervals
        if mod(k,1) == 0 % Plot at every point, adjust 'mod(k,N)' to plot every N points
            pn = pos_O(1,k);    % Position North (x)
            pe = pos_O(2,k);    % Position East (y)
            pd = pos_O(3,k);    % Position Down (z) - needs negation for Up
            phi = xn(9,k);      % Roll angle
            theta = xn(10,k);   % Pitch angle
            psi = xn(11,k);     % Yaw angle
            scale = 1;          % Scale for the kite model

            % Load kite 3D model data (faces, vertices, colors)
            Image_kite = coder.load('plane_image.mat','F','Verti','C');
            F = Image_kite.F;       % Faces
            Verti = Image_kite.Verti; % Vertices
            C = Image_kite.C;       % Colors

            % Apply scale to vertices
            Vert = scale*Verti';

            % Create rotation matrix from Euler angles (Z-Y-X sequence for Yaw-Pitch-Roll)
            R_body_to_inertial = [ cos(psi)*cos(theta) , cos(psi)*sin(phi)*sin(theta) - cos(phi)*sin(psi) , sin(phi)*sin(psi) + cos(phi)*cos(psi)*sin(theta);
                                   cos(theta)*sin(psi) , cos(phi)*cos(psi) + sin(phi)*sin(psi)*sin(theta) , cos(phi)*sin(psi)*sin(theta) - cos(psi)*sin(phi);
                                   -sin(theta)         ,           cos(theta)*sin(phi)                   ,           cos(phi)*cos(theta)                  ];

            % Rotate and translate vertices to the current kite position
            V = R_body_to_inertial * Vert;
            V = V + [pn*ones(1,size(V,2));pe*ones(1,size(V,2));pd*ones(1,size(V,2))];

            % Transform kite vertices to Wind frame
            V = M_WO*V;

            % Plot the kite as a 3D patch
            handlePlane = patch('faces', F, 'vertices' ,V');
            set(handlePlane, 'facec', 'r'); % Set the face color (force it)
            set(handlePlane, 'FaceVertexCData', C); % Set the color (from file)
            set(handlePlane, 'EdgeColor','none');
            set(handlePlane, 'FaceLighting', 'none');
            set(handlePlane, 'FaceColor', col );
        end
    end

    % Plot the main trajectory line
    plot3(pos_W(1,:), pos_W(2,:), pos_W(3,:), '-','Color', [0,0,0],'LineWidth', 0.25)

    % Plot projection lines onto the ground and side planes for better 3D visualization
    plot3(pos_W(1,:), pos_W(2,:), az(1).*ones(length(pos_W(3,:)),1), '-','Color',0.85 * [0,0,0],'LineWidth',0.1) % Projection on XY-plane (ground)
    hold on
    plot3(pos_W(1,:), ay(2).*ones(length(pos_W(2,:)),1), pos_W(3,:), '-','Color',0.85 * [0,0,0],'LineWidth',0.1) % Projection on XZ-plane (side)
    hold on
    plot3(ax(1).*ones(length(pos_W(1,:)),1), pos_W(2,:), pos_W(3,:), '-','Color',0.85 * [0,0,0],'LineWidth',0.1) % Projection on YZ-plane (front)

    % Fill the ground plane
    fill3(X1,Y1,Z1, c(:,2),'EdgeColor','none','FaceColor',c(1,:),'FaceAlpha',0.1);

    % Fill the side and front planes (for visual bounding box)
    X2 = [ax(1);ax(1);ax(1);ax(1)];
    Y2 = [ay(1);ay(2);ay(2);ay(1)];
    Z2 = [az(1);az(1);az(2);az(2)];
    fill3(X2,Y2,Z2, [0.9, 0.9, 0.9],'EdgeColor','none','FaceColor',[0.96, 0.96, 0.96],'FaceAlpha',0.5);

    X3 = [ax(1);ax(2);ax(2);ax(1)];
    Y3 = [ay(2);ay(2);ay(2);ay(2)];
    Z3 = [az(1);az(1);az(2);az(2)];
    fill3(X3,Y3,Z3, [0.9, 0.9, 0.9],'EdgeColor','none','FaceColor',[0.96, 0.96, 0.96],'FaceAlpha',0.5);
end